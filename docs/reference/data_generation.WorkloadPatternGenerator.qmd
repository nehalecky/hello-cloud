# data_generation.WorkloadPatternGenerator { #cloud_sim.data_generation.WorkloadPatternGenerator }

```python
data_generation.WorkloadPatternGenerator(seed=None)
```

Generate realistic cloud workload patterns based on research data

## Methods

| Name | Description |
| --- | --- |
| [generate](#cloud_sim.data_generation.WorkloadPatternGenerator.generate) | Generate synthetic data with specified number of samples. |
| [generate_anomalies](#cloud_sim.data_generation.WorkloadPatternGenerator.generate_anomalies) | Inject realistic anomalies into the data |
| [generate_time_series](#cloud_sim.data_generation.WorkloadPatternGenerator.generate_time_series) | Generate time series data for a specific workload type |

### generate { #cloud_sim.data_generation.WorkloadPatternGenerator.generate }

```python
data_generation.WorkloadPatternGenerator.generate(
    num_samples=1000,
    workload_type=None,
    **kwargs,
)
```

Generate synthetic data with specified number of samples.

This is a wrapper for generate_time_series for backward compatibility.

### generate_anomalies { #cloud_sim.data_generation.WorkloadPatternGenerator.generate_anomalies }

```python
data_generation.WorkloadPatternGenerator.generate_anomalies(
    df,
    anomaly_types=None,
)
```

Inject realistic anomalies into the data

### generate_time_series { #cloud_sim.data_generation.WorkloadPatternGenerator.generate_time_series }

```python
data_generation.WorkloadPatternGenerator.generate_time_series(
    workload_type,
    start_time,
    end_time,
    interval_minutes=5,
)
```

Generate time series data for a specific workload type