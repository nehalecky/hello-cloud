# data_generation.CloudMetricsDatasetBuilder { #cloud_sim.data_generation.CloudMetricsDatasetBuilder }

```python
data_generation.CloudMetricsDatasetBuilder(cache_dir=None)
```

Build and manage HuggingFace datasets for cloud metrics

## Methods

| Name | Description |
| --- | --- |
| [compute_dataset_statistics](#cloud_sim.data_generation.CloudMetricsDatasetBuilder.compute_dataset_statistics) | Compute comprehensive statistics for a dataset. |
| [create_anomaly_detection_dataset](#cloud_sim.data_generation.CloudMetricsDatasetBuilder.create_anomaly_detection_dataset) | Create dataset specifically for anomaly detection |
| [create_cost_optimization_dataset](#cloud_sim.data_generation.CloudMetricsDatasetBuilder.create_cost_optimization_dataset) | Create dataset for cost optimization recommendations |
| [create_time_series_sequences](#cloud_sim.data_generation.CloudMetricsDatasetBuilder.create_time_series_sequences) | Create sequences for time series models |
| [create_time_series_splits](#cloud_sim.data_generation.CloudMetricsDatasetBuilder.create_time_series_splits) | Create chronological train/test/validation splits for time series data. |
| [load_from_hub](#cloud_sim.data_generation.CloudMetricsDatasetBuilder.load_from_hub) | Load dataset from HuggingFace Hub |
| [polars_to_dataset](#cloud_sim.data_generation.CloudMetricsDatasetBuilder.polars_to_dataset) | Convert Polars DataFrame to HuggingFace Dataset |
| [prepare_for_foundation_models](#cloud_sim.data_generation.CloudMetricsDatasetBuilder.prepare_for_foundation_models) | Prepare dataset for foundation model training. |
| [prepare_sliding_windows](#cloud_sim.data_generation.CloudMetricsDatasetBuilder.prepare_sliding_windows) | Prepare sliding window features for time series models. |
| [validate_dataset](#cloud_sim.data_generation.CloudMetricsDatasetBuilder.validate_dataset) | Validate dataset quality and schema. |

### compute_dataset_statistics { #cloud_sim.data_generation.CloudMetricsDatasetBuilder.compute_dataset_statistics }

```python
data_generation.CloudMetricsDatasetBuilder.compute_dataset_statistics(dataset)
```

Compute comprehensive statistics for a dataset.

### create_anomaly_detection_dataset { #cloud_sim.data_generation.CloudMetricsDatasetBuilder.create_anomaly_detection_dataset }

```python
data_generation.CloudMetricsDatasetBuilder.create_anomaly_detection_dataset(
    df,
    window_size=24,
    contamination_rate=0.1,
)
```

Create dataset specifically for anomaly detection

### create_cost_optimization_dataset { #cloud_sim.data_generation.CloudMetricsDatasetBuilder.create_cost_optimization_dataset }

```python
data_generation.CloudMetricsDatasetBuilder.create_cost_optimization_dataset(df)
```

Create dataset for cost optimization recommendations

### create_time_series_sequences { #cloud_sim.data_generation.CloudMetricsDatasetBuilder.create_time_series_sequences }

```python
data_generation.CloudMetricsDatasetBuilder.create_time_series_sequences(
    dataset,
    sequence_length=168,
    stride=24,
    target_column='hourly_cost',
)
```

Create sequences for time series models

### create_time_series_splits { #cloud_sim.data_generation.CloudMetricsDatasetBuilder.create_time_series_splits }

```python
data_generation.CloudMetricsDatasetBuilder.create_time_series_splits(
    df,
    test_size=0.2,
    val_size=0.1,
)
```

Create chronological train/test/validation splits for time series data.

Args:
    df: Polars DataFrame with time series data
    test_size: Fraction of data for test set
    val_size: Fraction of data for validation set

Returns:
    DatasetDict with train, validation, and test splits

### load_from_hub { #cloud_sim.data_generation.CloudMetricsDatasetBuilder.load_from_hub }

```python
data_generation.CloudMetricsDatasetBuilder.load_from_hub(
    repo_name,
    split=None,
    token=None,
)
```

Load dataset from HuggingFace Hub

### polars_to_dataset { #cloud_sim.data_generation.CloudMetricsDatasetBuilder.polars_to_dataset }

```python
data_generation.CloudMetricsDatasetBuilder.polars_to_dataset(
    df,
    split_name='train',
)
```

Convert Polars DataFrame to HuggingFace Dataset

### prepare_for_foundation_models { #cloud_sim.data_generation.CloudMetricsDatasetBuilder.prepare_for_foundation_models }

```python
data_generation.CloudMetricsDatasetBuilder.prepare_for_foundation_models(df)
```

Prepare dataset for foundation model training.

Args:
    df: Polars DataFrame with cloud metrics

Returns:
    HuggingFace Dataset formatted for foundation models

### prepare_sliding_windows { #cloud_sim.data_generation.CloudMetricsDatasetBuilder.prepare_sliding_windows }

```python
data_generation.CloudMetricsDatasetBuilder.prepare_sliding_windows(
    df,
    window_size=24,
    stride=6,
    target_col='hourly_cost',
)
```

Prepare sliding window features for time series models.

Args:
    df: Polars DataFrame with time series data
    window_size: Size of the context window
    stride: Step size between windows
    target_col: Column to use as target

Returns:
    List of window dictionaries with context and target

### validate_dataset { #cloud_sim.data_generation.CloudMetricsDatasetBuilder.validate_dataset }

```python
data_generation.CloudMetricsDatasetBuilder.validate_dataset(
    dataset,
    check_schema=True,
)
```

Validate dataset quality and schema.

Returns:
    Tuple of (is_valid, list_of_errors)