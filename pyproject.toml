[project]
name = "hellocloud"
version = "0.1.0"
description = "Hands-on exploration of cloud resource usage and cost optimization"
authors = [{name = "Nicholaus Halecky", email = "your.email@example.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["cloud", "cost-optimization", "workload-analysis", "time-series", "forecasting"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core data processing
    "polars>=0.20.0",
    "numpy>=1.24.0",
    "pyarrow>=14.0.0",
    # HuggingFace for datasets (simplified, no transformers)
    "datasets>=2.14.0",
    "huggingface-hub>=0.19.0",
    # Probabilistic modeling (optional, but kept for future)
    "pymc>=5.10.0",
    "arviz>=0.17.0",
    "pytensor>=2.18.0",
    # Minimal visualization (only matplotlib used in pymc_cloud_model)
    "matplotlib>=3.7.0",
    # Data validation and utilities
    "pydantic>=2.0.0",
    "faker>=20.0.0",
    "loguru>=0.7.0",
    # Visualization (for notebooks)
    "altair>=5.0.0",
    "nbconvert>=7.16.6",
    "ipykernel>=6.30.1",
    "seaborn>=0.13.2",
    "scipy>=1.16.2",
    "scikit-learn>=1.7.2",
    "pyspark>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "ipykernel>=6.25.0",
    "jupytext>=1.16.0",  # Added for notebook versioning
    "myst-parser>=2.0.0",  # Added for MyST markdown support
    "myst-nb>=1.0.0",      # Added for MyST notebook execution
]

docs = [
    # Quarto documentation system (replaces MkDocs)
    "quartodoc>=0.7.0",     # API documentation generator
    "griffe>=0.48.0",       # Python introspection for quartodoc
    "jupyter-cache>=1.0.0", # Cache notebook execution
    # Visualization for tutorials
    "altair>=5.0.0",
    "plotly>=5.14.0",
    # Additional Quarto integrations
    "myst-parser>=2.0.0",   # MyST markdown support (compatibility)
]

research = [
    "jupyterlab>=4.0.0",
    "notebook>=7.0.0",
    "ipywidgets>=8.1.0",
    "nbconvert>=7.11.0",
    "jupytext>=1.16.0",  # Essential for research workflows
    "seaborn>=0.12.0",   # Statistical data visualization
    "scipy>=1.11.0",     # Scientific computing
    "statsmodels>=0.14.0",  # Time series analysis (ACF/PACF/STL)
    "scikit-learn>=1.3.0",  # ML metrics and utilities (required by GP evaluation)
    "ipython>=8.0.0",    # Enhanced interactive Python
    # Note: GP modeling (torch, gpytorch) moved to 'gpu' group
]

gpu = [
    # GPU-accelerated Gaussian Process modeling
    "torch>=2.0.0",      # PyTorch for deep learning and GP
    "gpytorch>=1.11.0",  # Scalable Gaussian Processes with PyTorch
]

foundation = [
    # Foundation models for time series forecasting (stubs - not yet implemented)
    # Uncomment when ready to implement:
    # "timesfm @ git+https://github.com/google-research/timesfm",  # TimesFM (Google)
    # "chronos-forecasting>=1.0.0",  # Chronos (Amazon)
    # "transformers>=4.35.0",        # Required by both models
]

all = [
    "hellocloud[dev,docs,research,gpu,foundation]",
]

[project.urls]
Homepage = "https://github.com/nehalecky/hello-cloud"
Repository = "https://github.com/nehalecky/hello-cloud"
Issues = "https://github.com/nehalecky/hello-cloud/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/hellocloud"]

[dependency-groups]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "jupytext>=1.16.0",
    "toml>=0.10.2",  # For testing pyproject.toml validity
]

docs = [
    # Quarto documentation system (replaces MkDocs)
    "quartodoc>=0.7.0",     # API documentation generator
    "griffe>=0.48.0",       # Python introspection for quartodoc
    "jupyter-cache>=1.0.0", # Cache notebook execution
    # Visualization for tutorials
    "altair>=5.0.0",
    "plotly>=5.14.0",
    # Additional Quarto integrations
    "myst-parser>=2.0.0",   # MyST markdown support (compatibility)
]

[tool.jupytext]
notebook_metadata_filter = "-all"
cell_metadata_filter = "-all"

[tool.jupytext.formats]
"notebooks/" = "md:myst"
"notebooks/_build/" = "ipynb"

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C90", # mccabe complexity
    "UP",  # pyupgrade
]
ignore = ["E501", "B008", "B905"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]
"notebooks/*" = ["E402", "F811"]  # Allow import reordering in notebooks

[tool.black]
line-length = 100
target-version = ["py312"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "--verbose",
    "--cov=src/hellocloud",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "optional: marks tests as requiring optional dependencies (deselect with '-m \"not optional\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "smoke: marks tests as quick smoke tests (syntax, imports)",
    "execution: marks tests that actually execute notebooks",
    "content: marks tests that validate notebook outputs",
]

[tool.coverage.run]
source = ["src/hellocloud"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
